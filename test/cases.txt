# Booleans

true
false

==>

Program(Boolean, Boolean)

# Keywords

:hi
:by-e
:h:i
:123
:

==>

Program(Keyword, Keyword, Keyword, Keyword, Keyword)

# Identifiers

one
o:ne
a-zA-Z0-9!$&*+-./:<=>@^_

==>

Program(Identifier, Identifier, Identifier)

# Numbers

+
-
+.
-.
.
-.0
+.0
.0
0.
+1.0
-10.
10.12
0x10

==>

Program(
  Identifier,
  Identifier,
  Identifier,
  Identifier,
  Identifier,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number,
  Number
  )

# Incorrect ambiguities that I can't fix

+1a
-1a
+1e
1_1e1
1e_1
1e1_1

==>

Program(Number,Identifier,Number,Identifier,Number,Identifier,Number,Number,Identifier,Number,Identifier)

# Ambiguities

+1
-1
a+1
a-1

==>

Program(Number, Number, Identifier, Identifier)

# Underscore Numbers

1_
1_1
_1
_.1
1_.1
1_._1
._1
.1_

==>

Program(Number, Number, Identifier, Identifier, Number, Number, Identifier, Number)

# Scientific notation

1e1
1_e1
_1e1

==>

Program(Number, Number, Identifier)

# Compound

[{:a 1} {:a 2}]

==>

Program(Tuple(Struct(Keyword, Number), Struct(Keyword, Number)))

# Strings

"hello"
@"hello"
@`hello`
"one\"\\two"
`hello world`
`hello "world`
"hello `world"
``hello `world``

==>

Program(String, String, String, String, String, String, String, String)

# Applications

(begin
  (when true
    (print (concat "hello" " " "world")))
  (print "DONE"))

==>

Program(Form(
  Identifier,
  Form(Special, Boolean, Form(
    Identifier, Form(Identifier, String, String, String)))
  Form(Identifier, String)))

# Specials

(if true
  (print "hello")
  (print "DONE"))

==>

Program(Form(
  Special, Boolean
  Form(Identifier, String)
  Form(Identifier, String)))

# Identifiers

true?
true+
_true
_
nil-
@foo
@

==>

Program(Identifier, Identifier, Identifier, Identifier, Identifier, Identifier, Identifier)

# Pipe

(foo | bar)

==>

Program(Form(Identifier, Pipe, Identifier))
